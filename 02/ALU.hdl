// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:

//zx
And16(a=x, b=false, out=outx0);
Mux16(a=x, b=outx0, sel=zx, out=outx1);

//nx
Not16(in=outx1, out=outx2);
Mux16(a=outx1, b=outx2, sel=nx, out=outx);

//zy
And16(a=y, b=false, out=outy0);
Mux16(a=y, b=outy0, sel=zy, out=outy1);

//ny
Not16(in=outy1, out=outy2);
Mux16(a=outy1, b=outy2, sel=ny, out=outy);

//f
And16(a=outx, b=outy, out=outAndxy);
Add16(a=outx, b=outy, out=outAddxy);
Mux16(a=outAndxy, b=outAddxy, sel=f, out=out1);

//no
Not16(in=out1, out=notout1);
Mux16(a=out1, b=notout1, sel=no, out=out,out=zrng);

Not16(in=zrng, out[15]=notng);
Not(in=notng, out=ng);

Or16(a=zrng, b=false, out[0..7]=m);
Or16(a=zrng, b=false, out[8..15]=n);

Or8Way(in=m, out=outm);
Or8Way(in=n, out=outn);

Or(a=outm, b=outn, out=notzr);
Not(in=notzr, out=zr);











}